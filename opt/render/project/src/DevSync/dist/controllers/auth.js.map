{"version":3,"file":"auth.js","names":["jwt","require","otpGenerator","sendMail","redisClient","User","v4","uuidv4","ConnectionStates","config","postLogIn","req","res","next","username","password","body","console","log","passwordHash","reply","hGetAll","regId","registration","JSON","parse","status","json","flag","user","isValidUser","email","name","plan","_id","expiresIn","Error","token","sign","process","env","JWT_SECRET","algorithm","first","last","err","postRegister","isUniqueEmail","isUniqueUsername","otp","generate","upperCase","specialChars","hSet","stringify","link","PUBLIC_HOST","mailOptions","from","MAIL_USER","to","subject","text","then","data","catch","confrimRegistration","params","tag","split","hGet","userdata","hDel","save","doc","render","send","module","exports"],"sources":["../../controllers/auth.js"],"sourcesContent":["const jwt = require('jsonwebtoken');\r\nconst otpGenerator = require('otp-generator');\r\n// const bcrypt = require('bcrypt');\r\nconst {sendMail} = require('../services/mailer');\r\nconst {redisClient} = require('../redis');\r\nconst User = require('../models/user');\r\nconst {v4:uuidv4} = require('uuid');\r\nconst { ConnectionStates } = require('mongoose');\r\n\r\nrequire('dotenv').config();\r\n\r\nasync function postLogIn(req, res, next) {\r\n  try {\r\n    const { username, password } = req.body;\r\n    console.log('login request', username, password);\r\n    const passwordHash = password; // Assuming password is already hashed\r\n    const reply = await redisClient.hGetAll('PendingRegistrations');\r\n    \r\n    for (const regId in reply) {\r\n      const registration = JSON.parse(reply[regId]);\r\n      if (registration.username === username && registration.password === password) {\r\n        res.status(401).json({\r\n          \"type\": \"error\",\r\n          \"message\": \"Email not verified\"\r\n        });\r\n        return next(); // Exit middleware\r\n      }\r\n    }\r\n    const [flag, user] = await User.isValidUser({ username, passwordHash });\r\n    if (flag) {\r\n      const { email, name, plan, _id } = user;\r\n      let expiresIn;\r\n      if (plan === 'basic') {\r\n        expiresIn = '1h';\r\n      } else if (plan === 'standard' || plan === 'premium') {\r\n        expiresIn = '999d';\r\n      } else {\r\n        throw new Error('Invalid Plan');\r\n      }\r\n      const token = jwt.sign(\r\n        { username, email, plan, name, _id },\r\n        process.env.JWT_SECRET,\r\n        { algorithm: 'HS256', expiresIn: expiresIn }\r\n      );\r\n      res.status(200).json({\r\n        \"type\": \"success\",\r\n        \"token\": token,\r\n        \"userData\": {\r\n          username,\r\n          _id,\r\n          plan,\r\n          email,\r\n          name: `${name.first} ${name.last}`\r\n        }\r\n      });\r\n    } else {\r\n        res.status(400).json({\r\n            \"type\": \"error\",\r\n            \"message\": \"Invalid credentials\"\r\n        });\r\n    }\r\n  } catch (err) {\r\n      next(err, 'Internal Server Error');\r\n  }\r\n}\r\n\r\nasync function postRegister(req,res,next) {\r\n  const {username,password,email,name} = req.body;\r\n  if(!(await User.isUniqueEmail(email))){\r\n    res.status(400).json(\r\n      {\r\n        \"type\":\"error\",\r\n        \"message\":\"Email already exists\"\r\n      }\r\n    )\r\n  }else if(!(await User.isUniqueUsername(username))){\r\n    res.status(400).json(\r\n      {\r\n        \"type\":\"error\",\r\n        \"message\":\"Username already exists\"\r\n      }\r\n    )\r\n  }\r\n  const otp = otpGenerator.generate(6, {upperCase: false, specialChars: false});\r\n  const regId = uuidv4();\r\n  console.log(regId);\r\n  await redisClient.hSet(\r\n    'PendingRegistrations',\r\n    regId,\r\n    JSON.stringify({username,password,email,name,otp}),\r\n    (err,reply)=>{\r\n      if(err) next(err);\r\n      else{\r\n        console.log(reply);\r\n        //implement something to notify admin or log data\r\n      }\r\n    }\r\n  )\r\n  const link = `http://${process.env.PUBLIC_HOST}/confirmRegistration/${regId};${otp}`;\r\n  const mailOptions = {\r\n    from:process.env.MAIL_USER,\r\n    to:email,\r\n    subject: 'Registration OTP',\r\n    text:`Click to confirm registration: ${link}`\r\n  }\r\n  sendMail(mailOptions).then((data)=>{\r\n    console.log(data);\r\n    res.status(200).json({\r\n      \"type\":\"success\",\r\n      \"message\":\"Registration OTP has been sent to your email.\",\r\n      \"regId\":regId\r\n    })\r\n  }).catch((err)=>{\r\n    next(err);\r\n  })\r\n}\r\nasync function confrimRegistration(req,res,next){\r\n  const [regId,otp] = req.params.tag.split(';');\r\n\r\n  console.log('request for confirmation:',regId,otp);\r\n\r\n  redisClient.hGet('PendingRegistrations',regId)\r\n  .then((reply)=>{\r\n    console.log(\"registering user:\",reply);\r\n    const json = JSON.parse(reply);\r\n    const {username,password,email,name} = json;\r\n    // const passwordHash = bcrypt.hashSync(password,12);\r\n    const passwordHash = password;\r\n    const first = name.split(' ')[0];\r\n    let last;\r\n    try{\r\n      last = name.split(' ')[1];\r\n    }catch(err){\r\n      console.log(err);\r\n    }\r\n    const userdata = {\r\n      username,\r\n      passwordHash,\r\n      name:{\r\n        first,\r\n        last:last?last:''\r\n      },\r\n      email\r\n    }\r\n    if(otp===json.otp){\r\n      const user = new User(userdata);\r\n      redisClient.hDel('PendingRegistrations',regId)\r\n      .then(async (reply)=>{\r\n        await user.save()\r\n        .then((doc)=>{\r\n            // res.status(200).json({\r\n            //   \"type\":\"success\",\r\n            //   \"message\":\"Registration Successful\"\r\n            // })\r\n            res.render(\"registered\");\r\n        }).catch((err)=>{\r\n          next(err);\r\n        })\r\n      }).catch((err)=>{\r\n        next(err);\r\n      })\r\n    }else{\r\n      res.status(400).send('Invalid OTP or link expired');\r\n    }\r\n    }\r\n  ).catch((err)=>{\r\n    next(err);\r\n  })\r\n  console.log('after');\r\n}\r\nmodule.exports.postLogIn = postLogIn;\r\nmodule.exports.postRegister = postRegister;\r\nmodule.exports.confrimRegistration = confrimRegistration;\r\n\r\n\r\n// async function postLogIn(req,res,next) {\r\n//   const {username,password} = req.body;\r\n//   console.log('login request',username,password);\r\n//   const passwordHash = password;\r\n//   // bcrypt.hash(password,12,async function(err,passwordHash) {\r\n//     // if(err) next(err);\r\n//     // else{\r\n//       redisClient.hGetAll('PendingRegistrations')\r\n//       .then((reply)=>{\r\n//         console.log(reply);\r\n//         for(const regId in reply){\r\n//           const registration = JSON.parse(reply[regId]);\r\n//           if(registration.username===username&&registration.password===password){\r\n//             res.status(401).json(\r\n//               {\r\n//                 \"type\":\"error\",\r\n//                 \"message\":\"Email not verified\"\r\n//               }\r\n//             )\r\n//             return next();\r\n//           }\r\n//         }\r\n//       })\r\n//       .then(async(data)=>{\r\n//         const [flag,user] = await User.isValidUser({username,passwordHash});\r\n//         console.log(flag,user);\r\n//         if(flag){\r\n//           const {email,name,plan,_id} = user;\r\n//           let expiresIn;\r\n//           if(plan==='basic'){\r\n//             expiresIn = '1h'\r\n//           }else if(plan==='standard'||plan==='premium'){\r\n//             expiresIn = '999d'\r\n//           }else{\r\n//             next(err,'Invalid Plan');\r\n//           }\r\n//           const token = jwt.sign(\r\n//             {username,email,plan,name,_id},\r\n//             process.env.JWT_SECRET,\r\n//             {algorithm: 'HS256',expiresIn:expiresIn},\r\n//             function(err,token){\r\n//               if(err) next(err);\r\n//               else{\r\n//                 res.status(200).json({\r\n//                 \"type\":\"success\",\r\n//                 \"token\":token,\r\n//                 \"userData\":{\r\n//                   username,\r\n//                   _id,\r\n//                   plan,\r\n//                   email,\r\n//                   name:`${name.first} ${name.last}`\r\n//                 }\r\n//                 })\r\n//               }\r\n//             }\r\n//           );\r\n//         }else{\r\n//           res.status(400).json({\r\n//             \"type\":\"error\",\r\n//             \"message\":\"Invalid credentials\"\r\n//           });\r\n//         }\r\n//       })\r\n//       .catch(err=>{\r\n//         next(err,'Internal Server Error');\r\n//       })\r\n      \r\n//     //}\r\n//   // })\r\n// }"],"mappings":"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CT;UACA;UACA;UACA;UACA9D,GAAG,CAAC+D,MAAM,CAAC,YAAY,CAAC;QAC5B,CAAC,CAAC,CAACV,KAAK,CAAEpB,GAAG,IAAG;UACdhC,IAAI,CAACgC,GAAG,CAAC;QACX,CAAC,CAAC;MACJ,CAAC,CAAC,CAACoB,KAAK,CAAEpB,GAAG,IAAG;QACdhC,IAAI,CAACgC,GAAG,CAAC;MACX,CAAC,CAAC;IACJ,CAAC,MAAI;MACHjC,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACkD,IAAI,CAAC,6BAA6B,CAAC;IACrD;EACA,CACF,CAAC,CAACX,KAAK,CAAEpB,GAAG,IAAG;IACbhC,IAAI,CAACgC,GAAG,CAAC;EACX,CAAC,CAAC;EACF5B,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;AACtB;AACA2D,MAAM,CAACC,OAAO,CAACpE,SAAS,GAAGA,SAAS;AACpCmE,MAAM,CAACC,OAAO,CAAChC,YAAY,GAAGA,YAAY;AAC1C+B,MAAM,CAACC,OAAO,CAACZ,mBAAmB,GAAGA,mBAAmB;;AAGxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","ignoreList":[]}